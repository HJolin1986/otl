<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
   <TITLE>OTL 4.0, Example 65 (Simple Insert/Select and otl_stream::clean() function for Oracle 7)</TITLE>
   <META NAME="Author" CONTENT="Sergei Kuchin">
   <META NAME="GENERATOR" CONTENT="Mozilla/3.03Gold (Win95; I) [Netscape]">
   <META NAME="KeyWords" CONTENT="OTL, Oracle, ODBC, DB2, CLI, database API, C++, Template Library">
</HEAD>
<BODY>

<H1 ALIGN=CENTER>OTL 4.0, Example 65 (Simple Insert/Select and otl_stream::clean()
function for Oracle 7)</H1>

<H1>Example 65 (Simple Insert/Select and otl_stream::clean() function for
Oracle 7)</H1>

<P>This example demonstrates simple INSERT, SELECT and the use of the <A HREF="otl3_stream_class.htm#clean">otl_stream::clean</A>()
function for Oracle 7.</P>

<H2>Source Code</H2>

<PRE>#include &lt;iostream&gt;
using namespace std;

#include &lt;stdio.h&gt;</PRE>

<PRE>#define OTL_ORA7 // Compile OTL 4.0/OCI7
#include &lt;otlv4.h&gt; // include the OTL 4.0 header file

<A HREF="otl3_connect_class.htm">otl_connect</A> db; // connect object

void insert()
// insert rows into table
{ 
 <A HREF="otl3_stream_class.htm">otl_stream</A> o(10, // buffer size
              &quot;insert into test_tab values(:f1&lt;int&gt;,:f2&lt;char[31]&gt;)&quot;, 
                 // SQL statement
              db // connect object
             );

 o.<A HREF="otl3_stream_class.htm#set_commit">set_commit</A>(0); // set stream's auto-commit to OFF.

 try{
  o&lt;&lt;1&lt;&lt;&quot;Line1&quot;; // Enter one row into the stream
  o.<A HREF="otl3_stream_class.htm#flush">flush</A>(); // flush the strem buffer, i.e. force
             // the stream to execute
  o&lt;&lt;1&lt;&lt;&quot;Line1&quot;; // Enter the same data into the stream
                 // and cause a &quot;duplicate key&quot; error.
  o.<A HREF="otl3_stream_class.htm#flush">flush</A>();
 }catch(<A HREF="otl3_exception_class.htm">otl_exception</A>&amp; p){
  if(p.code==1){
   // ORA-0001: ... duplicate key ...
   o.<A HREF="otl3_stream_class.htm#clean">clean</A>(1); // clean up the stream's buffer
               // and clean up thestream's internal
               // error flag as well. By doing this, 
               // it's possible to recover from 
               // a database error without closing
               // the stream. Remember, the number of 
               // situtation when it's possible is 
               // limited and the recover procedure should
               // be carefully designed.
  }else
   throw; // re-throw the exception to the outer catch block.
 }


 o&lt;&lt;2&lt;&lt;&quot;Line2&quot;; // Enter one more row of data after
                // recovering from the &quot;duplicate key&quot; 
                // error
 o.flush();

 db.<A HREF="otl3_connect_class.htm#commit">commit</A>(); // commit transaction

}

void select()
{ 
 <A HREF="otl3_stream_class.htm">otl_stream</A> i(10, // buffer size
              &quot;select * from test_tab&quot;,
                 // SELECT statement
              db // connect object
             ); 
   // create select stream
 
 int f1;
 char f2[31];

 while(!i.eof()){ // while not end-of-data
  i&gt;&gt;f1&gt;&gt;f2;
  cout&lt;&lt;&quot;f1=&quot;&lt;&lt;f1&lt;&lt;&quot;, f2=&quot;&lt;&lt;f2&lt;&lt;endl;
 }

}

int main()
{
 <A HREF="otl3_connect_class.htm">otl_connect::otl_initialize</A>(); // initialize OCI environment
 try{

  db.rlogon(&quot;scott/tiger&quot;); // connect to Oracle

  <A HREF="otl3_const_sql.htm">otl_cursor::direct_exec
</A>   (
    db,
    &quot;drop table test_tab&quot;,
    otl_exception::disabled // disable OTL exceptions
   ); // drop table

  <A HREF="otl3_const_sql.htm">otl_cursor::direct_exec
</A>   (
    db,
    &quot;create table test_tab(f1 number, f2 varchar2(30))&quot;
    );  // create table

  <A HREF="otl3_const_sql.htm">otl_cursor::direct_exec
</A>   (
    db,
    &quot;create unique index ind001 on test_tab(f1)&quot;
    );  // create unique index 

  insert(); // insert records into table
  select(); // select records from table

 }

 catch(<A HREF="otl3_exception_class.htm">otl_exception</A>&amp; p){ // intercept OTL exceptions
  cerr&lt;&lt;p.msg&lt;&lt;endl; // print out error message
  cerr&lt;&lt;p.stm_text&lt;&lt;endl; // print out SQL that caused the error
  cerr&lt;&lt;p.var_info&lt;&lt;endl; // print out the variable that caused the error
 }

 db.logoff(); // disconnect from Oracle

 return 0;

}
</PRE>

<H2>Output</H2>

<PRE>f1=1, f2=Line1
f1=2, f2=Line2


<HR WIDTH="100%"></PRE>

<CENTER><P><A HREF="otl3_examples.htm">Examples</A> <A HREF="otl3.htm">Contents</A>
<A HREF="home.htm">Go Home</A> </P></CENTER>

<P>Copyright &copy; 1996, 2009, Sergei Kuchin, email: <A HREF="mailto:skuchin@aceweb.com">skuchin@aceweb.com</A>,
<A HREF="mailto:skuchin@gmail.com">skuchin@gmail.com</A>. <SCRIPT Language="JavaScript"><!-- hide from oldgmailsers
 var modDate = new Date(document.lastModified)
 document.write("<i> Last Updated:</i> " + (modDate.getMonth()+1) + "/" + 
                modDate.getDate() + "/" + "0"+(modDate.getYear())%100+".");
 //-->
 </SCRIPT></P>

<P><I>Permission to use, copy, modify and redistribute this document for
any purpose is hereby granted without fee, provided that the above copyright
notice appear in all copies. </I></P>

<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-5456201-1");
pageTracker._trackPageview();
</script>
</BODY>
</HTML>
