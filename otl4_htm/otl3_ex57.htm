<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
   <TITLE>OTL 4.0, Example 57 (Insert/Update/Select with Oracle 8 BLOB in stream mode)</TITLE>
   <META NAME="Author" CONTENT="Sergei Kuchin">
   <META NAME="GENERATOR" CONTENT="Mozilla/3.03Gold (Win95; I) [Netscape]">
   <META NAME="KeyWords" CONTENT="OTL, Oracle, ODBC, DB2, CLI, database API, C++, Template Library">
</HEAD>
<BODY>

<H1 ALIGN=CENTER>OTL 4.0, Example 57 (Insert/Update/Select with Oracle
8 BLOB in stream mode)</H1>

<H1>Example 57 (Insert/Update/Select with Oracle 8 BLOB in stream mode)</H1>

<P>This example demonstrates INSERT, UPDATE, and SELECT statements with
the Oracle 8 BLOB datatype in <A HREF="otl3_lob_stream.htm">stream mode</A>.</P>

<H2>Source Code</H2>

<PRE>#include &lt;iostream&gt;
using namespace std;

#include &lt;stdio.h&gt;</PRE>

<PRE>#define OTL_ORA8 // Compile OTL 4.0/OCI8
#include &lt;otlv4.h&gt; // include the OTL 4.0 header file

<A HREF="otl3_connect_class.htm">otl_connect</A> db; // connect object

void insert()
// insert rows into table
{<A HREF="otl3_long_string.htm">otl_long_string</A> f2(60000); // define long string variable
 <A HREF="otl3_stream_class.htm">otl_stream</A> o(1, // buffer size has to be set to 1 for operations with LOBs
              &quot;insert into test_tab values(:f1&lt;int&gt;,empty_blob()) &quot;
              &quot;returning f2 into :f2&lt;<A HREF="otl3_bind_variables.htm#blob">blob</A>&gt; &quot;,
                 // SQL statement
              db // connect object
             );
 o.<A HREF="otl3_stream_class.htm#set_commit">set_commit</A>(0); // setting stream &quot;auto-commit&quot; to &quot;off&quot;. It is required
                  // when LOB stream mode is used.

 <A HREF="otl3_lob_stream.htm">otl_lob_stream</A> lob; // LOB stream for reading/writing unlimited number
                     // of bytes regardless of the buffer size.

 for(int i=1;i&lt;=20;++i){
  for(int j=0;j&lt;50000;++j)
   f2[j]='*';
  f2[50000]='?';
  f2.<A HREF="otl3_long_string.htm#set_len">set_len</A>(50001);

  o&lt;&lt;i;

  o<A HREF="otl3_stream_class.htm#stream_write_lob">&lt;&lt;</A>lob; // Initialize otl_lob_stream by writing it
          // into otl_stream. Weird, isn't it?

  lob.<A HREF="otl3_lob_stream.htm#set_len">set_len</A>(50001+23123); // setting the total  size of
                            // the BLOB to be written.
   // It is required for compatibility
   // with earlier releases of OCI8: OCI8.0.3, OCI8.0.4.
 
  lob<A HREF="otl3_lob_stream.htm#write">&lt;&lt;</A>f2; // writing first chunk of the BLOB into lob

  f2[23122]='?';
  f2.set_len(23123); // setting the size of the second chunk

  lob&lt;&lt;f2; // writing the second chunk of the BLOB into lob
  lob.<A HREF="otl3_lob_stream.htm">close</A>(); // closing the otl_lob_stream
 }

 db.commit(); // committing transaction.
}</PRE>

<PRE>void update()
// insert rows in table
{ </PRE>

<PRE> <A HREF="otl3_long_string.htm">otl_long_string</A> f2(6200); // define long string variable

 <A HREF="otl3_stream_class.htm">otl_stream</A> o(1, // buffer size has to be set to 1 for operations with LOBs
              &quot;update test_tab &quot;
              &quot;   set f2=empty_blob() &quot;
              &quot;where f1=:f1&lt;int&gt; &quot;
              &quot;returning f2 into :f2&lt;<A HREF="otl3_bind_variables.htm#blob">blob</A>&gt; &quot;,
                 // SQL statement
              db // connect object
             );

  <A HREF="otl3_lob_stream.htm">otl_lob_stream</A> lob;

  o.<A HREF="otl3_stream_class.htm#set_commit">set_commit</A>(0); // setting stream &quot;auto-commit&quot; to &quot;off&quot;. 


 for(int j=0;j&lt;6000;++j){
  f2[j]='#';
 }

 f2[6000]='?';
 f2.<A HREF="otl3_long_string.htm#set_len">set_len</A>(6001);

 o&lt;&lt;5;
 o<A HREF="otl3_stream_class.htm#stream_write_lob">&lt;&lt;</A>lob; // Initialize otl_lob_stream by writing it
         // into otl_stream.

 lob.<A HREF="otl3_lob_stream.htm#set_len">set_len</A>(6001*4); // setting the total size of of the BLOB to be written
 for(int i=1;i&lt;=4;++i)
  lob<A HREF="otl3_lob_stream.htm#write">&lt;&lt;</A>f2; // writing chunks of the BLOB into the otl_lob_stream

 lob.<A HREF="otl3_lob_stream.htm#close">close</A>(); // closing the otl_lob_stream

 db.commit(); // committing transaction

}

void select()
{ 
 <A HREF="otl3_long_string.htm">otl_long_string</A> f2(20000); // define long string variable

 <A HREF="otl3_stream_class.htm">otl_stream</A> i(10, // buffer size. To read BLOBs, it can be set to a size greater than 1
              &quot;select * from test_tab where f1&gt;=:f&lt;int&gt; and f1&lt;=:f*2&quot;,
                 // SELECT statement
              db // connect object
             ); 
   // create select stream
 
 float f1;
 <A HREF="otl3_lob_stream.htm">otl_lob_stream</A> lob; // Stream for reading BLOB

 i&lt;&lt;4; // assigning :f = 4
   // SELECT automatically executes when all input variables are
   // assigned. First portion of output rows is fetched to the buffer

 while(!i.eof()){ // while not end-of-data
  i&gt;&gt;f1;
  cout&lt;&lt;&quot;f1=&quot;&lt;&lt;f1&lt;&lt;endl;
  i<A HREF="otl3_stream_class.htm#stream_read_lob">&gt;&gt;</A>lob; // initializing BLOB stream by reading the BLOB reference 
          // into the otl_lob_stream from the otl_stream.
  int n=0;
  while(!lob.<A HREF="otl3_lob_stream.htm#eof">eof</A>()){ // read while not &quot;end-of-file&quot; -- end of BLOB
   ++n;
   lob<A HREF="otl3_lob_stream.htm#read">&gt;&gt;</A>f2; // reading a chunk of BLOB
   cout&lt;&lt;&quot;   chunk #&quot;&lt;&lt;n;
   cout&lt;&lt;&quot;, f2=&quot;&lt;&lt;f2[0]&lt;&lt;f2[f2.len()-1]&lt;&lt;&quot;, len=&quot;&lt;&lt;f2.len()&lt;&lt;endl;
  }
  lob.<A HREF="otl3_lob_stream.htm#close">close</A>(); // closing the otl_lob_stream. This step may be skipped.
  
 }

}

int main()
{
 <A HREF="otl3_connect_class.htm">otl_connect::otl_initialize</A>(); // initialize OCI environment
 try{

  db.rlogon(&quot;scott/tiger&quot;); // connect to Oracle

  <A HREF="otl3_const_sql.htm">otl_cursor::direct_exec
</A>   (
    db,
    &quot;drop table test_tab&quot;,
    otl_exception::disabled // disable OTL exceptions
   ); // drop table

  <A HREF="otl3_const_sql.htm">otl_cursor::direct_exec
</A>   (
    db,
    &quot;create table test_tab(f1 number, f2 blob)&quot;
    );  // create table

  insert(); // insert records into table
  update(); // update records in table
  select(); // select records from table

 }

 catch(<A HREF="otl3_exception_class.htm">otl_exception</A>&amp; p){ // intercept OTL exceptions
  cerr&lt;&lt;p.msg&lt;&lt;endl; // print out error message
  cerr&lt;&lt;p.stm_text&lt;&lt;endl; // print out SQL that caused the error
  cerr&lt;&lt;p.var_info&lt;&lt;endl; // print out the variable that caused the error
 }

 db.logoff(); // disconnect from Oracle

 return 0;

}
</PRE>

<H2>Output</H2>

<PRE>f1=4
   chunk #1, f2=**, len=20000
   chunk #2, f2=**, len=20000
   chunk #3, f2=**, len=20000
   chunk #4, f2=*?, len=13124
f1=5
   chunk #1, f2=##, len=20000
   chunk #2, f2=#?, len=4004
f1=6
   chunk #1, f2=**, len=20000
   chunk #2, f2=**, len=20000
   chunk #3, f2=**, len=20000
   chunk #4, f2=*?, len=13124
f1=7
   chunk #1, f2=**, len=20000
   chunk #2, f2=**, len=20000
   chunk #3, f2=**, len=20000
   chunk #4, f2=*?, len=13124
f1=8
   chunk #1, f2=**, len=20000
   chunk #2, f2=**, len=20000
   chunk #3, f2=**, len=20000
   chunk #4, f2=*?, len=13124


<HR WIDTH="100%"></PRE>

<CENTER><P><A HREF="otl3_examples.htm">Examples</A> <A HREF="otl3.htm">Contents</A>
<A HREF="home.htm">Go Home</A> </P></CENTER>

<P>Copyright &copy; 1996, 2009, Sergei Kuchin, email: <A HREF="mailto:skuchin@aceweb.com">skuchin@aceweb.com</A>,
<A HREF="mailto:skuchin@gmail.com">skuchin@gmail.com</A> <SCRIPT Language="JavaScript"><!-- hide from oldgmailsers
 var modDate = new Date(document.lastModified)
 document.write("<i> Last Updated:</i> " + (modDate.getMonth()+1) + "/" + 
                modDate.getDate() + "/" + "0"+(modDate.getYear())%100+".");
 //-->
 </SCRIPT>.</P>

<P><I>Permission to use, copy, modify and redistribute this document for
any purpose is hereby granted without fee, provided that the above copyright
notice appear in all copies. </I></P>

<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-5456201-1");
pageTracker._trackPageview();
</script>
</BODY>
</HTML>
