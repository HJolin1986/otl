<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html>
<head>
  <title>OTL 4.0, OTL stream class</title>
  <meta name="Author" content="Sergei Kuchin">
  <meta name="GENERATOR"
 content="Mozilla/3.03Gold (Win95; I) [Netscape]">
  <meta name="KeyWords"
 content="OTL, Oracle, ODBC, DB2, CLI, database API, C++, Template Library">
</head>
<body>
<h1 align="center">OTL 4.0, OTL stream concept</h1>
<h1><a name="otl_stream"></a>OTL stream concept</h1>
<p>Any SQL statement, PL/SQL block or a stored procedure call is
characterized
by its input / output [variables]. </p>
<p><b>Example 1.</b> A SELECT statement has scalar input variables that
are used in the WHERE clause of the statement. The SELECT statement
also
defines output columns. Potentially, the output columns are vector
parameters
since the SELECT statement may return multiple rows. </p>
<p><b>Example 2. </b>An INSERT statement writes data into a table,
i.e.
it has input parameters. Same is true for UPDATE statements. </p>
<p><b>Example 3.</b> A DELETE statement deletes rows from a table.
Deletion
criteria needs to be entered, thus the DELETE statement has input.</p>
<p><b>Example 4. </b>A stored procedure may have input and/or output
parameters.
Usually, stored procedure parameters are scalars. There is a special
case,
though: stored procedure returning a referenced cursor (Oracle) or a
result
set (MS SQL Server or Sybase).</p>
<p><b>Example 5. </b>An arbitrary PL/SQL block may have input or/and
output
parameters that may be either scalars or vectors.</p>
<p><a name="bulk"></a>Industrial strength database servers have bulk
(or
array) operations:</p>
<ul>
  <li>bulk INSERT</li>
  <li>bulk UPDATE</li>
  <li>bulk DELETE</li>
  <li>bulk SELECT</li>
</ul>
<p>Therefore, parameters in INSERT/UPDATE/DELETE statement may be
vectors
if the statement is performed in bulk.</p>
<p>The picture is clear: any interaction with SQL or its procedural
extension
can be treated as a black box with input and/or output. It does not
matter
what the black box does inside (according to the definition of a black
box). What matters is the <i><tt>input wires</tt> </i>that send
signals
<i>into</i> the box and the <i>output wires</i> that receive signals <i>from
</i>the box:</p>
<center>
<p><img src="otlodbc.gif" height="420" width="420"></p>
</center>
<p>Some of the wires may be both <i>input </i>and <i>output</i>. </p>
<p>Why not combine the concept of data streams and SQL? Instead of
multiplying
constructs and making database API's too convoluted, why not unify and
simplify them? The OTL gives an answer to those questions and the
answer
is the <a href="otl3_stream_class.htm">otl_stream class</a>.</p>
<p>Since a SQL statement may be done in bulk, the otl_stream is a
buffered
stream. Conceptually, the otl_stream has two separate buffers: input
and
output. The input buffer is comprised of all input variables put
together.
Respectively, the output buffer is comprised of all output variables
put
together. </p>
<p>C++ streams are usually manipulated via operator &gt;&gt; and
operator
&lt;&lt;. The stream reference is on the left of the operator symbol: </p>
<pre>   s&gt;&gt;variable;<br>   s&lt;&lt;variable;</pre>
<p>The double arrow shows the direction in which data goes: </p>
<ul>
  <li>&gt;&gt; -- from the stream into the data container (variable)</li>
  <li>&lt;&lt; -- from the data container (variable) into the stream</li>
</ul>
<p>OTL streams are similar to buffered C++ streams . A SQL statement or
stored procedure call is opened as an ordinary buffered stream. The
logic
of the OTL stream operations remains the same as the C++ stream
operations
with the only exception -- the OTL stream has separate input and output
buffers which may overlap. </p>
<p>The OTL stream has a flush function for flushing its input buffer
when
the buffer gets full and a collection of &gt;&gt; and &lt;&lt;
operators
for reading and writing objects of different data types. The most
important
advantage of the OTL streams is their unified interface to SQL
statements
and stored procedure call of any kind. This means that the application
developer needs to remember just a few syntactical constructs and
function
names which he already got familiar with when he started working with
C++
streams. </p>
<p>Inside the OTL stream there is a small parser for parsing <a
 href="otl3_bind_variables.htm">declarations
of bind variables and their data types</a>. There is no need to declare
C/C++ host variables and bind them with placeholders by special bind
function
calls. All necessary buffers are created dynamically inside the stream.
The stream just needs to be opened for reading and writing values.</p>
<p>The OTL stream interface requires use of the OTL exceptions. This
means
that potentially any OTL stream operation can throw an exception of the
<a href="otl3_exception_class.htm">otl_exception</a> type. In order to
intercept the exception and prevent the program from aborting, wrap up
the OTL stream code with the corresponding try &amp; catch block.</p>
<p>The functioning of the otl_stream is pretty much automatic: when all
of the input variables of the stream are defined (in other words, the
input
buffer is filled out), it triggers the block box inside the stream to
execute.
The output buffer gets filled out in the process of the execution of
the
black box. After the execution is finished, the output values can be
read
from the stream. If it is a SELECT statement and it returns more rows
than
the output buffer can hold, after the whole output buffer is read, then
the stream automatically fetches the next bacth of rows into the output
buffer.</p>
<p>
</p>
<hr width="100%">
<p></p>
<center>
<p><a href="otl3_intro.htm">Prev</a> <a href="otl3_class.htm">Next</a>
<a href="otl3.htm">Contents</a> <a href="home.htm">Go Home</a> </p>
</center>
<p>Copyright &copy; 1996, 2009, Sergei Kuchin, email: <a
 href="mailto:skuchin@aceweb.com">skuchin@aceweb.com</a>,
<a href="mailto:skuchin@gmail.com">skuchin@yahogmail</a>
<script language="JavaScript">
<!-- hide from old browsers
 var modDate = new Date(document.lastModified)
 document.write("<i> Last Updated:</i> " + (modDate.getMonth()+1) + "/" + 
                modDate.getDate() + "/" + "0"+(modDate.getYear())%100+".");
 //-->
 </script>.</p>
<p><i>Permission to use, copy, modify and redistribute this document
for
any purpose is hereby granted without fee, provided that the above
copyright
notice appear in all copies. </i></p>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-5456201-1");
pageTracker._trackPageview();
</script>
</body>
</html>
